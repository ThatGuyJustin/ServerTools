buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

configurations {
    shade
    implementation.extendsFrom shade
}

apply plugin: 'net.minecraftforge.gradle'

version = '1.0'
group = 'dev.turtlebongo.ThatGuyJustin.ServerTools' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ServerTools'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    mavenCentral()
    flatDir {
        dirs 'include'
    }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.14'
    shade 'org.apache.commons:commons-collections4:4.4'
    shade 'net.dv8tion:JDA:5.0.0-alpha.20'
    shade 'com.neovisionaries:nv-websocket-client:2.14'
    shade 'com.squareup.okhttp3:okhttp:4.9.3'
    shade 'net.sf.trove4j:trove4j:3.0.3'
    shade 'com.fasterxml.jackson.core:jackson-core:2.13.4'
    shade 'club.minnced:discord-webhooks:0.8.2'
//    compileOnly name: 'ftb-quests-forge-1802.3.8-build.101'
//    compileOnly name: 'ftb-teams-forge-1802.2.6-build.69'
//    shade 'org.jetbrains.kotlin:kotlin-stdlib:1.7.10'
//    shadow group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
//    shadow group: 'net.dv8tion', name: 'JDA', version: '5.0.0-alpha.20'
//    shadow group: 'com.neovisionaries', name: 'nv-websocket-client', version: '2.14'
//    shadow group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'
//    shadow group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
//    shadow group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.4'
//    shadow group: 'org.slf4j', name: 'slf4j-api', version: '2.0.3'
//    shadow group: 'club.minnced', name: 'discord-webhooks', version: '0.8.2'




    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "Server Tools",
                "Specification-Vendor"    : "ThatGuyJustin",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ThatGuyJustin",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
    relocate 'org.apache.commons', "deps.shadow.commons"
    relocate 'net.dv8tion', "deps.shadow.jda"
    relocate 'com.squareup.okhttp3', "deps.shadow.okhttp3"
    relocate 'net.sf.trove4j', "deps.shadow.trove4j"
    relocate 'com.fasterxml.jackson.core', "deps.shadow.jackson"
    relocate 'club.minnced', "deps.shadow.discordwebhooks"
    relocate 'org.jetbrains', 'deps.shadow.kotlin'
    dependencies {
        include(dependency('org.apache.commons:commons-collections4'))
        include(dependency('net.dv8tion:JDA'))
        include(dependency('com.neovisionaries:nv-websocket-client'))
        include(dependency('com.squareup.okhttp3:okhttp'))
        include(dependency('net.sf.trove4j:trove4j'))
        include(dependency('com.fasterxml.jackson.core:jackson-core'))
        include(dependency('com.fasterxml.jackson.core:jackson-annotations'))
        include(dependency('com.fasterxml.jackson.core:jackson-databind'))
        include(dependency('club.minnced:discord-webhooks'))
//        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('com.squareup.okio:okio-jvm'))
        include(dependency('org.json:json'))
    }
//    include(dependency('org.apache.commons'))
//    include(dependency('net.dv8tion:JDA:5.0.0-alpha.20'))
//    include(dependency('com.neovisionaries:nv-websocket-client:2.14'))
//    include(dependency('com.squareup.okhttp3:okhttp:4.10.0'))
//    include(dependency('net.sf.trove4j:trove4j:3.0.3'))
//    include(dependency('com.fasterxml.jackson.core:jackson-core:2.13.4'))
//    include(dependency('club.minnced:discord-webhooks'))

    minimize{
    }
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
